// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: serialization/packets.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package no.elg.infiniteBootleg.protobuf;

@kotlin.jvm.JvmName("-initializemoveEntity")
public inline fun moveEntity(block: no.elg.infiniteBootleg.protobuf.MoveEntityKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.Packets.MoveEntity =
  no.elg.infiniteBootleg.protobuf.MoveEntityKt.Dsl._create(no.elg.infiniteBootleg.protobuf.Packets.MoveEntity.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `packets.MoveEntity`
 */
public object MoveEntityKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: no.elg.infiniteBootleg.protobuf.Packets.MoveEntity.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: no.elg.infiniteBootleg.protobuf.Packets.MoveEntity.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): no.elg.infiniteBootleg.protobuf.Packets.MoveEntity = _builder.build()

    /**
     * ```
     *Id of entity to move
     * ```
     *
     * `string uuid = 1;`
     */
    public var uuid: kotlin.String
      @JvmName("getUuid")
      get() = _builder.getUuid()
      @JvmName("setUuid")
      set(value) {
        _builder.setUuid(value)
      }
    /**
     * ```
     *Id of entity to move
     * ```
     *
     * `string uuid = 1;`
     */
    public fun clearUuid() {
      _builder.clearUuid()
    }

    /**
     * `.persistence.Vector2f velocity = 2;`
     */
    public var velocity: no.elg.infiniteBootleg.protobuf.ProtoWorld.Vector2f
      @JvmName("getVelocity")
      get() = _builder.getVelocity()
      @JvmName("setVelocity")
      set(value) {
        _builder.setVelocity(value)
      }
    /**
     * `.persistence.Vector2f velocity = 2;`
     */
    public fun clearVelocity() {
      _builder.clearVelocity()
    }
    /**
     * `.persistence.Vector2f velocity = 2;`
     * @return Whether the velocity field is set.
     */
    public fun hasVelocity(): kotlin.Boolean {
      return _builder.hasVelocity()
    }

    /**
     * `.persistence.Vector2f position = 3;`
     */
    public var position: no.elg.infiniteBootleg.protobuf.ProtoWorld.Vector2f
      @JvmName("getPosition")
      get() = _builder.getPosition()
      @JvmName("setPosition")
      set(value) {
        _builder.setPosition(value)
      }
    /**
     * `.persistence.Vector2f position = 3;`
     */
    public fun clearPosition() {
      _builder.clearPosition()
    }
    /**
     * `.persistence.Vector2f position = 3;`
     * @return Whether the position field is set.
     */
    public fun hasPosition(): kotlin.Boolean {
      return _builder.hasPosition()
    }

    /**
     * `float lookAngleDeg = 4;`
     */
    public var lookAngleDeg: kotlin.Float
      @JvmName("getLookAngleDeg")
      get() = _builder.getLookAngleDeg()
      @JvmName("setLookAngleDeg")
      set(value) {
        _builder.setLookAngleDeg(value)
      }
    /**
     * `float lookAngleDeg = 4;`
     */
    public fun clearLookAngleDeg() {
      _builder.clearLookAngleDeg()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun no.elg.infiniteBootleg.protobuf.Packets.MoveEntity.copy(block: no.elg.infiniteBootleg.protobuf.MoveEntityKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.Packets.MoveEntity =
  no.elg.infiniteBootleg.protobuf.MoveEntityKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val no.elg.infiniteBootleg.protobuf.Packets.MoveEntityOrBuilder.velocityOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.Vector2f?
  get() = if (hasVelocity()) getVelocity() else null

public val no.elg.infiniteBootleg.protobuf.Packets.MoveEntityOrBuilder.positionOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.Vector2f?
  get() = if (hasPosition()) getPosition() else null

