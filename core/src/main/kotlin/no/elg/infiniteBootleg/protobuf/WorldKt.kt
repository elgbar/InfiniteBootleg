// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: serialization/persistence.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package no.elg.infiniteBootleg.protobuf;

@kotlin.jvm.JvmName("-initializeworld")
public inline fun world(block: no.elg.infiniteBootleg.protobuf.WorldKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.ProtoWorld.World =
  no.elg.infiniteBootleg.protobuf.WorldKt.Dsl._create(no.elg.infiniteBootleg.protobuf.ProtoWorld.World.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `persistence.World`
 */
public object WorldKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: no.elg.infiniteBootleg.protobuf.ProtoWorld.World.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: no.elg.infiniteBootleg.protobuf.ProtoWorld.World.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): no.elg.infiniteBootleg.protobuf.ProtoWorld.World = _builder.build()

    /**
     * `int64 seed = 1;`
     */
    public var seed: kotlin.Long
      @JvmName("getSeed")
      get() = _builder.getSeed()
      @JvmName("setSeed")
      set(value) {
        _builder.setSeed(value)
      }
    /**
     * `int64 seed = 1;`
     */
    public fun clearSeed() {
      _builder.clearSeed()
    }

    /**
     * `string name = 2;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * `string name = 2;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * `float time = 3;`
     */
    public var time: kotlin.Float
      @JvmName("getTime")
      get() = _builder.getTime()
      @JvmName("setTime")
      set(value) {
        _builder.setTime(value)
      }
    /**
     * `float time = 3;`
     */
    public fun clearTime() {
      _builder.clearTime()
    }

    /**
     * `.persistence.Vector2i spawn = 4;`
     */
    public var spawn: no.elg.infiniteBootleg.protobuf.ProtoWorld.Vector2i
      @JvmName("getSpawn")
      get() = _builder.getSpawn()
      @JvmName("setSpawn")
      set(value) {
        _builder.setSpawn(value)
      }
    /**
     * `.persistence.Vector2i spawn = 4;`
     */
    public fun clearSpawn() {
      _builder.clearSpawn()
    }
    /**
     * `.persistence.Vector2i spawn = 4;`
     * @return Whether the spawn field is set.
     */
    public fun hasSpawn(): kotlin.Boolean {
      return _builder.hasSpawn()
    }

    /**
     * `float timeScale = 5;`
     */
    public var timeScale: kotlin.Float
      @JvmName("getTimeScale")
      get() = _builder.getTimeScale()
      @JvmName("setTimeScale")
      set(value) {
        _builder.setTimeScale(value)
      }
    /**
     * `float timeScale = 5;`
     */
    public fun clearTimeScale() {
      _builder.clearTimeScale()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ChunkColumnsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .persistence.ChunkColumn chunkColumns = 6;`
     */
     public val chunkColumns: com.google.protobuf.kotlin.DslList<no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn, ChunkColumnsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getChunkColumnsList()
      )
    /**
     * `repeated .persistence.ChunkColumn chunkColumns = 6;`
     * @param value The chunkColumns to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addChunkColumns")
    public fun com.google.protobuf.kotlin.DslList<no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn, ChunkColumnsProxy>.add(value: no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn) {
      _builder.addChunkColumns(value)
    }
    /**
     * `repeated .persistence.ChunkColumn chunkColumns = 6;`
     * @param value The chunkColumns to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignChunkColumns")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn, ChunkColumnsProxy>.plusAssign(value: no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn) {
      add(value)
    }
    /**
     * `repeated .persistence.ChunkColumn chunkColumns = 6;`
     * @param values The chunkColumns to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllChunkColumns")
    public fun com.google.protobuf.kotlin.DslList<no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn, ChunkColumnsProxy>.addAll(values: kotlin.collections.Iterable<no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn>) {
      _builder.addAllChunkColumns(values)
    }
    /**
     * `repeated .persistence.ChunkColumn chunkColumns = 6;`
     * @param values The chunkColumns to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllChunkColumns")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn, ChunkColumnsProxy>.plusAssign(values: kotlin.collections.Iterable<no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn>) {
      addAll(values)
    }
    /**
     * `repeated .persistence.ChunkColumn chunkColumns = 6;`
     * @param index The index to set the value at.
     * @param value The chunkColumns to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setChunkColumns")
    public operator fun com.google.protobuf.kotlin.DslList<no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn, ChunkColumnsProxy>.set(index: kotlin.Int, value: no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn) {
      _builder.setChunkColumns(index, value)
    }
    /**
     * `repeated .persistence.ChunkColumn chunkColumns = 6;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearChunkColumns")
    public fun com.google.protobuf.kotlin.DslList<no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn, ChunkColumnsProxy>.clear() {
      _builder.clearChunkColumns()
    }


    /**
     * `.persistence.World.Generator generator = 16;`
     */
    public var generator: no.elg.infiniteBootleg.protobuf.ProtoWorld.World.Generator
      @JvmName("getGenerator")
      get() = _builder.getGenerator()
      @JvmName("setGenerator")
      set(value) {
        _builder.setGenerator(value)
      }
    public var generatorValue: kotlin.Int
      @JvmName("getGeneratorValue")
      get() = _builder.getGeneratorValue()
      @JvmName("setGeneratorValue")
      set(value) {
        _builder.setGeneratorValue(value)
      }
    /**
     * `.persistence.World.Generator generator = 16;`
     */
    public fun clearGenerator() {
      _builder.clearGenerator()
    }

    /**
     * `optional .persistence.Entity player = 17;`
     */
    public var player: no.elg.infiniteBootleg.protobuf.ProtoWorld.Entity
      @JvmName("getPlayer")
      get() = _builder.getPlayer()
      @JvmName("setPlayer")
      set(value) {
        _builder.setPlayer(value)
      }
    /**
     * `optional .persistence.Entity player = 17;`
     */
    public fun clearPlayer() {
      _builder.clearPlayer()
    }
    /**
     * `optional .persistence.Entity player = 17;`
     * @return Whether the player field is set.
     */
    public fun hasPlayer(): kotlin.Boolean {
      return _builder.hasPlayer()
    }
    public val WorldKt.Dsl.playerOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.Entity?
      get() = _builder.playerOrNull
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun no.elg.infiniteBootleg.protobuf.ProtoWorld.World.copy(block: no.elg.infiniteBootleg.protobuf.WorldKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.ProtoWorld.World =
  no.elg.infiniteBootleg.protobuf.WorldKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val no.elg.infiniteBootleg.protobuf.ProtoWorld.WorldOrBuilder.spawnOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.Vector2i?
  get() = if (hasSpawn()) getSpawn() else null

public val no.elg.infiniteBootleg.protobuf.ProtoWorld.WorldOrBuilder.playerOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.Entity?
  get() = if (hasPlayer()) getPlayer() else null

