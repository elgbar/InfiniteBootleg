// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: serialization/packets.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package no.elg.infiniteBootleg.protobuf;

@kotlin.jvm.JvmName("-initializestartGame")
public inline fun startGame(block: no.elg.infiniteBootleg.protobuf.StartGameKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.Packets.StartGame =
  no.elg.infiniteBootleg.protobuf.StartGameKt.Dsl._create(no.elg.infiniteBootleg.protobuf.Packets.StartGame.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `packets.StartGame`
 */
public object StartGameKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: no.elg.infiniteBootleg.protobuf.Packets.StartGame.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: no.elg.infiniteBootleg.protobuf.Packets.StartGame.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): no.elg.infiniteBootleg.protobuf.Packets.StartGame = _builder.build()

    /**
     * ```
     *The entity the client is controlling
     * ```
     *
     * `.persistence.Entity controlling = 1;`
     */
    public var controlling: no.elg.infiniteBootleg.protobuf.ProtoWorld.Entity
      @JvmName("getControlling")
      get() = _builder.getControlling()
      @JvmName("setControlling")
      set(value) {
        _builder.setControlling(value)
      }
    /**
     * ```
     *The entity the client is controlling
     * ```
     *
     * `.persistence.Entity controlling = 1;`
     */
    public fun clearControlling() {
      _builder.clearControlling()
    }
    /**
     * ```
     *The entity the client is controlling
     * ```
     *
     * `.persistence.Entity controlling = 1;`
     * @return Whether the controlling field is set.
     */
    public fun hasControlling(): kotlin.Boolean {
      return _builder.hasControlling()
    }

    /**
     * ```
     * the world info of the server
     * ```
     *
     * `.persistence.World world = 2;`
     */
    public var world: no.elg.infiniteBootleg.protobuf.ProtoWorld.World
      @JvmName("getWorld")
      get() = _builder.getWorld()
      @JvmName("setWorld")
      set(value) {
        _builder.setWorld(value)
      }
    /**
     * ```
     * the world info of the server
     * ```
     *
     * `.persistence.World world = 2;`
     */
    public fun clearWorld() {
      _builder.clearWorld()
    }
    /**
     * ```
     * the world info of the server
     * ```
     *
     * `.persistence.World world = 2;`
     * @return Whether the world field is set.
     */
    public fun hasWorld(): kotlin.Boolean {
      return _builder.hasWorld()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun no.elg.infiniteBootleg.protobuf.Packets.StartGame.copy(block: no.elg.infiniteBootleg.protobuf.StartGameKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.Packets.StartGame =
  no.elg.infiniteBootleg.protobuf.StartGameKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val no.elg.infiniteBootleg.protobuf.Packets.StartGameOrBuilder.controllingOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.Entity?
  get() = if (hasControlling()) getControlling() else null

public val no.elg.infiniteBootleg.protobuf.Packets.StartGameOrBuilder.worldOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.World?
  get() = if (hasWorld()) getWorld() else null

