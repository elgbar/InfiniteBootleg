// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: serialization/persistence.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package no.elg.infiniteBootleg.protobuf;

@kotlin.jvm.JvmName("-initializeblock")
public inline fun block(block: no.elg.infiniteBootleg.protobuf.BlockKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.ProtoWorld.Block =
  no.elg.infiniteBootleg.protobuf.BlockKt.Dsl._create(no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `persistence.Block`
 */
public object BlockKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): no.elg.infiniteBootleg.protobuf.ProtoWorld.Block = _builder.build()

    /**
     * ```
     *ordinal from Material enum
     * ```
     *
     * `int32 material_ordinal = 1;`
     */
    public var materialOrdinal: kotlin.Int
      @JvmName("getMaterialOrdinal")
      get() = _builder.getMaterialOrdinal()
      @JvmName("setMaterialOrdinal")
      set(value) {
        _builder.setMaterialOrdinal(value)
      }
    /**
     * ```
     *ordinal from Material enum
     * ```
     *
     * `int32 material_ordinal = 1;`
     */
    public fun clearMaterialOrdinal() {
      _builder.clearMaterialOrdinal()
    }

    /**
     * ```
     *TntBlock, only applicable if material is TNT
     * ```
     *
     * `optional .persistence.Block.TNT tnt = 16;`
     */
    public var tnt: no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.TNT
      @JvmName("getTnt")
      get() = _builder.getTnt()
      @JvmName("setTnt")
      set(value) {
        _builder.setTnt(value)
      }
    /**
     * ```
     *TntBlock, only applicable if material is TNT
     * ```
     *
     * `optional .persistence.Block.TNT tnt = 16;`
     */
    public fun clearTnt() {
      _builder.clearTnt()
    }
    /**
     * ```
     *TntBlock, only applicable if material is TNT
     * ```
     *
     * `optional .persistence.Block.TNT tnt = 16;`
     * @return Whether the tnt field is set.
     */
    public fun hasTnt(): kotlin.Boolean {
      return _builder.hasTnt()
    }
    public val BlockKt.Dsl.tntOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.TNT?
      get() = _builder.tntOrNull
  }
  @kotlin.jvm.JvmName("-initializetNT")
  public inline fun tNT(block: no.elg.infiniteBootleg.protobuf.BlockKt.TNTKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.TNT =
    no.elg.infiniteBootleg.protobuf.BlockKt.TNTKt.Dsl._create(no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.TNT.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `persistence.Block.TNT`
   */
  public object TNTKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.TNT.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.TNT.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.TNT = _builder.build()

      /**
       * `int64 ticks_left = 1;`
       */
      public var ticksLeft: kotlin.Long
        @JvmName("getTicksLeft")
        get() = _builder.getTicksLeft()
        @JvmName("setTicksLeft")
        set(value) {
          _builder.setTicksLeft(value)
        }
      /**
       * `int64 ticks_left = 1;`
       */
      public fun clearTicksLeft() {
        _builder.clearTicksLeft()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.copy(block: no.elg.infiniteBootleg.protobuf.BlockKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.ProtoWorld.Block =
  no.elg.infiniteBootleg.protobuf.BlockKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.TNT.copy(block: no.elg.infiniteBootleg.protobuf.BlockKt.TNTKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.TNT =
  no.elg.infiniteBootleg.protobuf.BlockKt.TNTKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val no.elg.infiniteBootleg.protobuf.ProtoWorld.BlockOrBuilder.tntOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.Block.TNT?
  get() = if (hasTnt()) getTnt() else null

