// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: serialization/packets.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package no.elg.infiniteBootleg.protobuf;

@kotlin.jvm.JvmName("-initializeupdateChunk")
public inline fun updateChunk(block: no.elg.infiniteBootleg.protobuf.UpdateChunkKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.Packets.UpdateChunk =
  no.elg.infiniteBootleg.protobuf.UpdateChunkKt.Dsl._create(no.elg.infiniteBootleg.protobuf.Packets.UpdateChunk.newBuilder()).apply { block() }._build()
/**
 * ```
 * Update all blocks in a chunk
 * ```
 *
 * Protobuf type `packets.UpdateChunk`
 */
public object UpdateChunkKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: no.elg.infiniteBootleg.protobuf.Packets.UpdateChunk.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: no.elg.infiniteBootleg.protobuf.Packets.UpdateChunk.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): no.elg.infiniteBootleg.protobuf.Packets.UpdateChunk = _builder.build()

    /**
     * `.persistence.Chunk chunk = 1;`
     */
    public var chunk: no.elg.infiniteBootleg.protobuf.ProtoWorld.Chunk
      @JvmName("getChunk")
      get() = _builder.getChunk()
      @JvmName("setChunk")
      set(value) {
        _builder.setChunk(value)
      }
    /**
     * `.persistence.Chunk chunk = 1;`
     */
    public fun clearChunk() {
      _builder.clearChunk()
    }
    /**
     * `.persistence.Chunk chunk = 1;`
     * @return Whether the chunk field is set.
     */
    public fun hasChunk(): kotlin.Boolean {
      return _builder.hasChunk()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun no.elg.infiniteBootleg.protobuf.Packets.UpdateChunk.copy(block: no.elg.infiniteBootleg.protobuf.UpdateChunkKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.Packets.UpdateChunk =
  no.elg.infiniteBootleg.protobuf.UpdateChunkKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val no.elg.infiniteBootleg.protobuf.Packets.UpdateChunkOrBuilder.chunkOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.Chunk?
  get() = if (hasChunk()) getChunk() else null

