// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: serialization/packets.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package no.elg.infiniteBootleg.protobuf;

@kotlin.jvm.JvmName("-initializechunkRequest")
public inline fun chunkRequest(block: no.elg.infiniteBootleg.protobuf.ChunkRequestKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.Packets.ChunkRequest =
  no.elg.infiniteBootleg.protobuf.ChunkRequestKt.Dsl._create(no.elg.infiniteBootleg.protobuf.Packets.ChunkRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `packets.ChunkRequest`
 */
public object ChunkRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: no.elg.infiniteBootleg.protobuf.Packets.ChunkRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: no.elg.infiniteBootleg.protobuf.Packets.ChunkRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): no.elg.infiniteBootleg.protobuf.Packets.ChunkRequest = _builder.build()

    /**
     * `.persistence.Vector2i chunkLocation = 1;`
     */
    public var chunkLocation: no.elg.infiniteBootleg.protobuf.ProtoWorld.Vector2i
      @JvmName("getChunkLocation")
      get() = _builder.getChunkLocation()
      @JvmName("setChunkLocation")
      set(value) {
        _builder.setChunkLocation(value)
      }
    /**
     * `.persistence.Vector2i chunkLocation = 1;`
     */
    public fun clearChunkLocation() {
      _builder.clearChunkLocation()
    }
    /**
     * `.persistence.Vector2i chunkLocation = 1;`
     * @return Whether the chunkLocation field is set.
     */
    public fun hasChunkLocation(): kotlin.Boolean {
      return _builder.hasChunkLocation()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun no.elg.infiniteBootleg.protobuf.Packets.ChunkRequest.copy(block: no.elg.infiniteBootleg.protobuf.ChunkRequestKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.Packets.ChunkRequest =
  no.elg.infiniteBootleg.protobuf.ChunkRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val no.elg.infiniteBootleg.protobuf.Packets.ChunkRequestOrBuilder.chunkLocationOrNull: no.elg.infiniteBootleg.protobuf.ProtoWorld.Vector2i?
  get() = if (hasChunkLocation()) getChunkLocation() else null

