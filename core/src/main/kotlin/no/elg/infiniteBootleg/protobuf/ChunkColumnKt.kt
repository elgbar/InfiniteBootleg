// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: serialization/persistence.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package no.elg.infiniteBootleg.protobuf;

@kotlin.jvm.JvmName("-initializechunkColumn")
public inline fun chunkColumn(block: no.elg.infiniteBootleg.protobuf.ChunkColumnKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn =
  no.elg.infiniteBootleg.protobuf.ChunkColumnKt.Dsl._create(no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `persistence.ChunkColumn`
 */
public object ChunkColumnKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn = _builder.build()

    /**
     * `int32 chunkX = 1;`
     */
    public var chunkX: kotlin.Int
      @JvmName("getChunkX")
      get() = _builder.getChunkX()
      @JvmName("setChunkX")
      set(value) {
        _builder.setChunkX(value)
      }
    /**
     * `int32 chunkX = 1;`
     */
    public fun clearChunkX() {
      _builder.clearChunkX()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TopSolidBlocksProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated int32 top_solid_blocks = 2;`
     */
     public val topSolidBlocks: com.google.protobuf.kotlin.DslList<kotlin.Int, TopSolidBlocksProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getTopSolidBlocksList()
      )
    /**
     * `repeated int32 top_solid_blocks = 2;`
     * @param value The topSolidBlocks to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addTopSolidBlocks")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopSolidBlocksProxy>.add(value: kotlin.Int) {
      _builder.addTopSolidBlocks(value)
    }/**
     * `repeated int32 top_solid_blocks = 2;`
     * @param value The topSolidBlocks to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignTopSolidBlocks")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopSolidBlocksProxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * `repeated int32 top_solid_blocks = 2;`
     * @param values The topSolidBlocks to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllTopSolidBlocks")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopSolidBlocksProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllTopSolidBlocks(values)
    }/**
     * `repeated int32 top_solid_blocks = 2;`
     * @param values The topSolidBlocks to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllTopSolidBlocks")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopSolidBlocksProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * `repeated int32 top_solid_blocks = 2;`
     * @param index The index to set the value at.
     * @param value The topSolidBlocks to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setTopSolidBlocks")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopSolidBlocksProxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setTopSolidBlocks(index, value)
    }/**
     * `repeated int32 top_solid_blocks = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearTopSolidBlocks")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopSolidBlocksProxy>.clear() {
      _builder.clearTopSolidBlocks()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TopTransparentBlocksProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated int32 top_transparent_blocks = 3;`
     */
     public val topTransparentBlocks: com.google.protobuf.kotlin.DslList<kotlin.Int, TopTransparentBlocksProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getTopTransparentBlocksList()
      )
    /**
     * `repeated int32 top_transparent_blocks = 3;`
     * @param value The topTransparentBlocks to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addTopTransparentBlocks")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopTransparentBlocksProxy>.add(value: kotlin.Int) {
      _builder.addTopTransparentBlocks(value)
    }/**
     * `repeated int32 top_transparent_blocks = 3;`
     * @param value The topTransparentBlocks to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignTopTransparentBlocks")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopTransparentBlocksProxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * `repeated int32 top_transparent_blocks = 3;`
     * @param values The topTransparentBlocks to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllTopTransparentBlocks")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopTransparentBlocksProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllTopTransparentBlocks(values)
    }/**
     * `repeated int32 top_transparent_blocks = 3;`
     * @param values The topTransparentBlocks to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllTopTransparentBlocks")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopTransparentBlocksProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * `repeated int32 top_transparent_blocks = 3;`
     * @param index The index to set the value at.
     * @param value The topTransparentBlocks to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setTopTransparentBlocks")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopTransparentBlocksProxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setTopTransparentBlocks(index, value)
    }/**
     * `repeated int32 top_transparent_blocks = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearTopTransparentBlocks")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, TopTransparentBlocksProxy>.clear() {
      _builder.clearTopTransparentBlocks()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn.copy(block: no.elg.infiniteBootleg.protobuf.ChunkColumnKt.Dsl.() -> kotlin.Unit): no.elg.infiniteBootleg.protobuf.ProtoWorld.ChunkColumn =
  no.elg.infiniteBootleg.protobuf.ChunkColumnKt.Dsl._create(this.toBuilder()).apply { block() }._build()

