import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

plugins {
  id "java"
  id "org.jetbrains.kotlin.jvm" version "$kotlinVersion" apply false
  id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion" apply false
  id "com.diffplug.spotless" version "6.25.0" apply false
  id "com.github.ben-manes.versions" version "0.51.0" apply false
  id "com.google.protobuf" version "0.9.4" apply false
}

tasks.named("wrapper") {
  distributionType = Wrapper.DistributionType.BIN
}

def getGitVersion() {
  def file = new File(project.projectDir, "./core/src/main/resources/version")
  if (!file.exists() || !file.canRead()) {
    System.err.println("Failed to read version from file $file.absolutePath")
    return "UNKNOWN"
  }
  return file.readLines()[0]
}

allprojects {
  apply plugin: "java"
  apply plugin: "kotlin"
  apply plugin: "com.diffplug.spotless"
  apply plugin: "com.github.ben-manes.versions"

  version = getGitVersion()

  repositories {
    mavenLocal()
    mavenCentral()
    google()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://raw.githubusercontent.com/elgbar/maven2/repo/" }
  }

  spotless {
    format("misc") {
      target("*.gradle", "**/*.md", ".gitignore", "**/*.yml", "**/*.yaml", "**/*.proto")

      trimTrailingWhitespace()
      indentWithSpaces(2)
      endWithNewline()
    }
    java {
      targetExclude fileTree(projectDir) { include '**/generated/**' }

      removeUnusedImports()
      googleJavaFormat().reflowLongStrings()
    }
    kotlin {
      targetExclude fileTree(projectDir) { include '**/generated/**' }

      ktlint()
        .setEditorConfigPath("$rootDir/.editorconfig")
        .editorConfigOverride([
          "ktlint_function_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than": "5",
          "ktlint_function_signature_body_expression_wrapping"                                       : "multiline"
        ])
    }
  }
  tasks.classes.dependsOn spotlessApply
}

subprojects {

  apply plugin: "idea"
  apply plugin: "kotlin"
  apply plugin: "org.jetbrains.kotlin.jvm"
  apply plugin: "java"

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(22)
    }
  }

  sourceSets.main.java.srcDirs = ["src/main/java", "src/main/kotlin"]
  sourceSets.test.java.srcDirs = ["src/test/java", "src/test/kotlin"]

  tasks.withType(KotlinCompilationTask).configureEach {
    compilerOptions {
      languageVersion = KotlinVersion.KOTLIN_2_1
      progressiveMode = true
      optIn = ["kotlin.contracts.ExperimentalContracts"]
      freeCompilerArgs.add("-Xjvm-default=all")
    }
  }

  test {
    useJUnitPlatform {
      includeEngines "junit-jupiter", "junit-vintage"
    }
    jvmArgs = ["--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED",
               "--add-opens", "java.xml/jdk.xml.internal=ALL-UNNAMED",
               "--add-opens", "java.base/java.lang=ALL-UNNAMED",
               "--add-opens", "java.base/java.io=ALL-UNNAMED",
               "--add-opens", "java.base/java.util.concurrent=ALL-UNNAMED",
               "--add-opens", "java.base/java.util.stream=ALL-UNNAMED",
               "--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED",
               "--add-opens", "java.base/java.security=ALL-UNNAMED",
               "--add-opens", "java.base/sun.nio.fs=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ]
  }

  dependencies {
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    implementation "com.fasterxml.uuid:java-uuid-generator:5.1.0"
    implementation "com.google.guava:guava:33.2.1-jre"
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation "com.google.protobuf:protobuf-bom:$protobufVersion"
    implementation "com.google.protobuf:protobuf-kotlin:$protobufVersion"
    implementation "com.kotcrab.vis:vis-ui:$visVersion"
    implementation "com.strongjoshua:libgdx-inGameConsole:1.0.0"
    implementation "io.github.libktx:ktx-actors:$ktxVersion"
    implementation "io.github.libktx:ktx-app:$ktxVersion"
    implementation "io.github.libktx:ktx-assets:$ktxVersion"
    implementation "io.github.libktx:ktx-async:$ktxVersion"
    implementation "io.github.libktx:ktx-collections:$ktxVersion"
    implementation "io.github.libktx:ktx-graphics:$ktxVersion"
    implementation "io.github.libktx:ktx-style:$ktxVersion"
    implementation "io.github.libktx:ktx-vis:$ktxVersion"
    implementation "io.github.libktx:ktx-vis-style:$ktxVersion"
    implementation "io.github.libktx:ktx-ashley:$ktxVersion"
    implementation "io.github.libktx:ktx-box2d:$ktxVersion"
    implementation "io.github.libktx:ktx-math:$ktxVersion"
    implementation "io.github.libktx:ktx-preferences:$ktxVersion"
    implementation "io.github.libktx:ktx-log:$ktxVersion"
    implementation "io.netty:netty-all:4.1.110.Final"
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.apache.commons:commons-lang3:3.14.0"
    implementation "org.jetbrains:annotations:24.1.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    implementation 'io.github.oshai:kotlin-logging-jvm:6.0.9'
    implementation platform('org.apache.logging.log4j:log4j-bom:2.23.1')
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl'
    implementation 'org.fusesource.jansi:jansi:2.4.1'

    testImplementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    testImplementation "io.mockk:mockk:1.13.11"
    testImplementation "org.junit:junit-bom:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.vintage:junit-vintage-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-params"

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testRuntimeOnly "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  }

  tasks.named("dependencyUpdates").configure {
    gradleReleaseChannel = "current"
    checkConstraints = true
    rejectVersionIf {
      isNonStable(it.candidate.version)
    }
  }
}

project(":desktop") {

  dependencies {
    implementation project(":core")
    implementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  }
}

project(":core") {
  apply plugin: "com.google.protobuf"

  protobuf {
    protoc {
      // Download from repositories
      artifact = "com.google.protobuf:protoc:$protobufVersion"
    }
    generateProtoTasks {
      all().each { task ->
        task.builtins {
          java {}
          kotlin {}
        }
      }
    }
  }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}
