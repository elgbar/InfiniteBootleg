import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

plugins {
  id "java"
  alias(libs.plugins.kotlin.jvm).apply(false)
  alias(libs.plugins.kotlin.allopen).apply(false)
  alias(libs.plugins.spotless).apply(false)
  alias(libs.plugins.versions).apply(false)
  alias(libs.plugins.protobuf).apply(false)
  alias(libs.plugins.stacktracedecoroutinator).apply(false)
}

tasks.named("wrapper") {
  distributionType = Wrapper.DistributionType.BIN
}

def getGitVersion() {
  def file = new File(project.projectDir, "./core/src/main/resources/version")
  if (!file.exists() || !file.canRead()) {
    System.err.println("Failed to read version from file $file.absolutePath")
    return "UNKNOWN"
  }
  return file.readLines()[0]
}

allprojects {
  apply plugin: "java"
  apply plugin: "kotlin"
  apply plugin: "com.diffplug.spotless"
  apply plugin: "com.github.ben-manes.versions"

  version = getGitVersion()

  repositories {
    mavenLocal()
    mavenCentral()
    google()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://raw.githubusercontent.com/elgbar/maven2/repo/" }
  }

  spotless {
    format("misc") {
      target("*.gradle", "**/*.md", ".gitignore", "**/*.yml", "**/*.yaml", "**/*.proto")

      trimTrailingWhitespace()
      indentWithSpaces(2)
      endWithNewline()
    }
    java {
      targetExclude fileTree(projectDir) { include '**/generated/**' }

      removeUnusedImports()
      googleJavaFormat().reflowLongStrings()
    }
    kotlin {
      targetExclude fileTree(projectDir) { include '**/generated/**' }

      ktlint()
        .setEditorConfigPath("$rootDir/.editorconfig")
        .editorConfigOverride([
          "ktlint_function_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than": "5",
          "ktlint_function_signature_body_expression_wrapping"                                       : "multiline"
        ])
    }
  }

  tasks.withType(JavaExec).configureEach {
    setIgnoreExitValue(true)
  }
}

subprojects {
  apply plugin: "idea"
  apply plugin: "kotlin"
  apply plugin: "org.jetbrains.kotlin.jvm"
  apply plugin: "java"
  apply plugin: "dev.reformator.stacktracedecoroutinator"

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(23)
    }
  }

  ext {
    project.ext.assetsDir = new File("../core/src/main/resources")
  }

  tasks.classes.dependsOn spotlessApply

  tasks.withType(KotlinCompilationTask).configureEach {
    compilerOptions {
      languageVersion = KotlinVersion.KOTLIN_2_2
      progressiveMode = true
      extraWarnings.set(false)
      optIn = ["kotlin.contracts.ExperimentalContracts"]
      freeCompilerArgs.add("-Xdebug")
      freeCompilerArgs.add("-Xwhen-guards") // https://github.com/Kotlin/KEEP/blob/guards/proposals/guards.md
      freeCompilerArgs.add("-Xnon-local-break-continue") // https://github.com/Kotlin/KEEP/blob/guards/proposals/break-continue-in-inline-lambdas.md (beta in 2.1)
      freeCompilerArgs.add("-Xsuppress-warning=UNUSED_VARIABLE") // https://kotlinlang.org/docs/whatsnew21.html#extra-compiler-checks
//      allWarningsAsErrors = true
    }
  }

  test {
    useJUnitPlatform {
      includeEngines "junit-jupiter", "junit-vintage"
    }
    jvmArgs = ["--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED",
               "--add-opens", "java.xml/jdk.xml.internal=ALL-UNNAMED",
               "--add-opens", "java.base/java.lang=ALL-UNNAMED",
               "--add-opens", "java.base/java.io=ALL-UNNAMED",
               "--add-opens", "java.base/java.util.concurrent=ALL-UNNAMED",
               "--add-opens", "java.base/java.util.stream=ALL-UNNAMED",
               "--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED",
               "--add-opens", "java.base/java.security=ALL-UNNAMED",
               "--add-opens", "java.base/sun.nio.fs=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",]
  }

  dependencies {
    implementation libs.gdx.core
    implementation libs.gdx.box2d
    implementation libs.gdx.freetype
    implementation libs.uuid
    implementation libs.caffeine
    implementation libs.protobuf.bom
    implementation libs.protobuf.kotlin
    implementation libs.visUi
    implementation libs.inGameConsole
    implementation libs.ktx.actors
    implementation libs.ktx.app
    implementation libs.ktx.assets
    implementation libs.ktx.async
    implementation libs.ktx.collections
    implementation libs.ktx.graphics
    implementation libs.ktx.style
    implementation libs.ktx.vis
    implementation libs.ktx.vis.style
    implementation libs.ktx.ashley
    implementation libs.ktx.box2d
    implementation libs.ktx.math
    implementation libs.ktx.preferences
    implementation libs.ktx.log
    implementation platform(libs.netty.bom)
    implementation libs.netty.all
    implementation libs.apacheCommons.collections
    implementation libs.apacheCommons.lang
    implementation libs.annotations
    implementation libs.kotlin.reflect
    implementation libs.kotlin.coroutines
    implementation libs.fastutil
    implementation libs.oshaiLogging
    implementation platform(libs.log4j.bom)
    implementation libs.log4j.api
    implementation libs.log4j.core
    implementation libs.log4j.slf4j
    implementation libs.jansi

    testImplementation libs.gdx.backend.headless
    testImplementation libs.mockk
    testImplementation platform(libs.junit.jupiter.bom)
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.jupiter.engine
    testImplementation libs.junit.vintage.engine
    testImplementation libs.junit.jupiter.params

    testRuntimeOnly libs.junit.platform.launcher
    testRuntimeOnly libs.gdx.platform
  }

  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { v -> version.toUpperCase().contains(v) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
  }

  tasks.named("dependencyUpdates").configure {
    gradleReleaseChannel = "current"
    checkConstraints = true
    rejectVersionIf {
      isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
  }
}

project(":client") {
  dependencies {
    implementation(project(":core"))
    implementation(libs.gdx.backend.lwjgl3)
    implementation(variantOf(libs.gdx.box2d.platform) { classifier("natives-desktop") })
    implementation(variantOf(libs.gdx.freetype.platform) { classifier("natives-desktop") })
    implementation(variantOf(libs.gdx.platform) { classifier("natives-desktop") })
  }
}

project(":server") {
  dependencies {
    implementation project(":core")
    implementation(libs.gdx.backend.headless)
    implementation(variantOf(libs.gdx.box2d.platform) { classifier("natives-desktop") })
    implementation(variantOf(libs.gdx.platform) { classifier("natives-desktop") })
  }
}

project(":core") {
  apply plugin: "com.google.protobuf"

  protobuf {
    protoc {
      artifact = libs.protobuf.protoc.get()
    }
    generateProtoTasks {
      all().each { task ->
        task.builtins {
          java {}
          kotlin {}
        }
      }
    }
  }
}
