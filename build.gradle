import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
  id "java"
  id "org.jetbrains.kotlin.jvm" version "$kotlinVersion" apply false
  id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion" apply false
  id "com.diffplug.spotless" version "6.15.0"
  id "com.github.ben-manes.versions" version "0.46.0"
}

tasks.named("wrapper") {
  distributionType = Wrapper.DistributionType.BIN
}

def getGitVersion() {
  def file = new File(project.projectDir, "./core/src/main/resources/version")
  if (!file.exists() || !file.canRead()) {
    System.err.println("Failed to read version from file " + file.absolutePath)
    return "UNKNOWN"
  }
  return file.readLines()[0]
}

allprojects {
  apply plugin: "java"
  apply plugin: "kotlin"

  version = getGitVersion()

  repositories {
    mavenLocal()
    mavenCentral()
    google()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://raw.githubusercontent.com/elgbar/maven2/repo/" }
  }
}

subprojects {

  apply plugin: "idea"
  apply plugin: "java"
  apply plugin: "org.jetbrains.kotlin.jvm"
  apply plugin: "com.diffplug.spotless"

  sourceCompatibility = 17
  targetCompatibility = sourceCompatibility
  [compileKotlin, compileTestKotlin]*.kotlinOptions*.jvmTarget = sourceCompatibility

  [compileJava, compileTestJava]*.options*.encoding = "UTF-8"

  sourceSets.main.java.srcDirs = ["src/main/java", "src/main/kotlin"]
  sourceSets.test.java.srcDirs = ["src/test/java", "src/test/kotlin"]

  tasks.withType(KotlinCompile).configureEach {
    kotlinOptions.freeCompilerArgs += "-opt-in=kotlin.contracts.ExperimentalContracts"
  }

  spotless {
    format("misc") {
      target("*.gradle", "**/*.md", ".gitignore", "**/*.xml", "**/*.yml", "**/*.yaml", "**/*.proto")

      trimTrailingWhitespace()
      indentWithSpaces(2)
      endWithNewline()
    }
    java {
      removeUnusedImports()
      googleJavaFormat()
    }
    kotlin {
      ktlint()
        .setUseExperimental(true)
        .editorConfigOverride([
          "indent_size"             : "2",
          "continuation_indent_size": "2",
          "max_line_length"         : "180",
          "end_of_line"             : "lf",
        ])
    }
  }

  test {
    useJUnitPlatform {
      includeEngines "junit-jupiter", "junit-vintage"
    }
    jvmArgs = ["--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED",
               "--add-opens", "java.xml/jdk.xml.internal=ALL-UNNAMED",
               "--add-opens", "java.base/java.lang=ALL-UNNAMED",
               "--add-opens", "java.base/java.io=ALL-UNNAMED",
               "--add-opens", "java.base/java.util.concurrent=ALL-UNNAMED",
               "--add-opens", "java.base/java.util.stream=ALL-UNNAMED",
               "--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED",
               "--add-opens", "java.base/java.security=ALL-UNNAMED",
               "--add-opens", "java.base/sun.nio.fs=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ]
  }

  dependencies {
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    implementation "com.fasterxml.uuid:java-uuid-generator:4.1.0"
    implementation "com.google.guava:guava:31.1-jre"
    implementation "com.google.protobuf:protobuf-java:3.22.0"
    implementation "com.kotcrab.vis:vis-ui:$visVersion"
    implementation "com.strongjoshua:libgdx-inGameConsole:1.0.0"
    implementation "io.github.libktx:ktx-actors:$ktxVersion"
    implementation "io.github.libktx:ktx-app:$ktxVersion"
    implementation "io.github.libktx:ktx-assets:$ktxVersion"
    implementation "io.github.libktx:ktx-async:$ktxVersion"
    implementation "io.github.libktx:ktx-collections:$ktxVersion"
    implementation "io.github.libktx:ktx-graphics:$ktxVersion"
    implementation "io.github.libktx:ktx-style:$ktxVersion"
    implementation "io.github.libktx:ktx-vis:$ktxVersion"
    implementation "io.github.libktx:ktx-vis-style:$ktxVersion"
    implementation "io.github.libktx:ktx-ashley:$ktxVersion"
    implementation "io.netty:netty-all:4.1.89.Final"
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "org.jetbrains:annotations:24.0.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    testImplementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    testImplementation "io.mockk:mockk:1.13.4"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.vintage:junit-vintage-engine:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  }
}

project(":desktop") {

  dependencies {
    implementation project(":core")
    implementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  }
}

project(":core") {}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}
