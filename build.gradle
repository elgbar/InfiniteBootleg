plugins {
  id "java"
  id "idea"
  id "org.jetbrains.kotlin.jvm" version "$kotlin_version" apply false
  id "org.jetbrains.kotlin.plugin.allopen" version "$kotlin_version" apply false
  id "com.diffplug.spotless" version "5.15.0"
}

tasks.named('wrapper') {
  distributionType = Wrapper.DistributionType.BIN
}

def getGitVersion() {
  def file = new File(project.projectDir, "./core/src/main/resources/version")
  if (!file.exists() || !file.canRead()) {
    System.err.println("Failed to read version from file " + file.absolutePath)
    return "UNKNOWN"
  }
  return file.readLines()[0]
}

allprojects {
  apply plugin: "java"
  apply plugin: 'idea'
  apply plugin: 'kotlin'

  version = getGitVersion()

  repositories {
    mavenLocal()
    mavenCentral()
    google()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://raw.githubusercontent.com/elgbar/maven2/repo/" }
  }
}

//test {
//  failFast = true
//}


subprojects {

  apply plugin: "idea"
  apply plugin: "java"
  apply plugin: "jacoco"
  apply plugin: "org.jetbrains.kotlin.jvm"
  apply plugin: "com.diffplug.spotless"

  sourceCompatibility = 16
  targetCompatibility = sourceCompatibility
  [compileKotlin, compileTestKotlin]*.kotlinOptions*.jvmTarget = sourceCompatibility

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

  sourceSets.main.java.srcDirs = ["src/main/java", "src/main/kotlin"]
  sourceSets.test.java.srcDirs = ["src/test/java", "src/test/kotlin"]

  spotless {
    format("misc") {
      target("*.gradle", "**/*.md", ".gitignore", "**/*.xml", "**/*.qst*", "**/*.cnv*", "**/*.yml", "**/*.yaml")

      trimTrailingWhitespace()
      indentWithSpaces(2)
      endWithNewline()
    }
    java {
      removeUnusedImports()
      googleJavaFormat("1.11.0")
    }
    kotlin {
      ktlint("0.42.1").userData([
         "indent_size"             : "2",
         "continuation_indent_size": "2",
         "max_line_length"         : "180",
      ])
    }
  }

  test {
    useJUnitPlatform {
      includeEngines "junit-jupiter", "junit-vintage"
    }
    jvmArgs = ["--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED",
               "--add-opens", "java.xml/jdk.xml.internal=ALL-UNNAMED",
               "--add-opens", "java.base/java.lang=ALL-UNNAMED",
               "--add-opens", "java.base/java.io=ALL-UNNAMED",
               "--add-opens", "java.base/java.util.concurrent=ALL-UNNAMED",
               "--add-opens", "java.base/java.util.stream=ALL-UNNAMED",
               "--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED",
               "--add-opens", "java.base/java.security=ALL-UNNAMED",
               "--add-opens", "java.base/sun.nio.fs=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
               "--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ]
  }
}

project(":desktop") {

  dependencies {
    implementation project(":core")

    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
  }
}

project(":core") {

  dependencies {

    implementation "com.strongjoshua:libgdx-inGameConsole:1.0.0"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "no.kh498.util:CommonUtil:1.0.4"

    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    implementation "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"


    api "io.github.libktx:ktx-app:$ktxVersion"
    implementation "io.github.libktx:ktx-vis:$ktxVersion"
    implementation "io.github.libktx:ktx-vis-style:$ktxVersion"
    implementation "io.github.libktx:ktx-style:$ktxVersion"
    implementation "io.github.libktx:ktx-actors:$ktxVersion"
    implementation "io.github.libktx:ktx-collections:$ktxVersion"
    implementation "io.github.libktx:ktx-graphics:$ktxVersion"
    implementation "io.github.libktx:ktx-async:$ktxVersion"
    implementation "io.github.libktx:ktx-assets:$ktxVersion"

    implementation "com.kotcrab.vis:vis-ui:$visVersion"
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.fasterxml.uuid:java-uuid-generator:4.0.1'

    implementation 'com.google.protobuf:protobuf-java:3.18.1'
    implementation 'io.netty:netty-all:4.1.69.Final'

    implementation 'org.jetbrains:annotations:22.0.0'

    testImplementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    testImplementation 'io.mockk:mockk:1.12.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.8.1'
    testImplementation "org.mockito:mockito-all:1.9.+"
    testRuntimeOnly "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  }
}
